{
  "swagger": "2.0",
  "info": {
    "title": "Craftnote API",
    "version": "0.2.1",
    "description": "API to manage projects, files and users in Craftnote.",
    "contact": {
      "name": "myCraftnote Digital GmbH",
      "email": "support@craftnote.de",
      "url": "https://www.craftnote.de"
    },
    "license": {
      "name": "proprietary"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "host": "europe-west1-craftnote-live.cloudfunctions.net",
  "basePath": "/api/v1",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "X-CN-API-Key"
    }
  },
  "paths": {
    "/company/employees (DRAFT)": {
      "get": {
        "description": "List employees of the company associated with the API key. This is a draft and not implemented yet!",
        "tags": [
          "Company Employees (DRAFT)"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "description": "Number of items to skip"
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "description": "Numbers of items to return (maximum 100)"
          }
        ],
        "responses": {
          "200": {
            "description": "List returned successfully",
            "schema": {
              "$ref": "#/definitions/EmployeesList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unable to authorize",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "415": {
            "description": "Invalid content type",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      },
      "post": {
        "description": "Invite employees. This is a draft and not implemented yet!",
        "tags": [
          "Company Employees (DRAFT)"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Employees to invite",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InviteEmployeesList"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Invites sent"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "415": {
            "description": "Invalid content type",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/projects": {
      "get": {
        "description": "List all projects of the company.",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "description": "Number of items to skip"
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "description": "Numbers of items to return (maximum 100)"
          }
        ],
        "responses": {
          "200": {
            "description": "List returned successfully",
            "schema": {
              "$ref": "#/definitions/ProjectsList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unable to authorize",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "415": {
            "description": "Invalid content type",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      },
      "post": {
        "description": "Create new project/folder",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Project data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project successfully created",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "415": {
            "description": "Invalid content type",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/projects/{projectId}": {
      "parameters": [
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "description": "ID of the project",
          "type": "string"
        }
      ],
      "get": {
        "description": "Retrieve individual project",
        "tags": [
          "Projects"
        ],
        "responses": {
          "200": {
            "description": "Project returned succesfully",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not allowed to access this project",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Project ID was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Update project",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Project data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not allowed to update this project",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Project ID was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{projectId}/deeplink": {
      "parameters": [
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "description": "ID of the project",
          "type": "string"
        }
      ],
      "get": {
        "description": "Retrieve a project deeplink",
        "tags": [
          "Projects"
        ],
        "responses": {
          "200": {
            "description": "Project deeplink returned succesfully",
            "schema": {
              "$ref": "#/definitions/Deeplink"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not allowed to access this project",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Project ID was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{projectId}/files": {
      "parameters": [
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "description": "ID of the project",
          "type": "string"
        }
      ],
      "get": {
        "description": "List all files of a project",
        "tags": [
          "Project Files"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "description": "Number of items to skip"
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "description": "Numbers of items to return (maximum 100)"
          }
        ],
        "responses": {
          "200": {
            "description": "List returned successfully",
            "schema": {
              "$ref": "#/definitions/FilesList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not allowed to access this project",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Project ID was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Create file/folder",
        "tags": [
          "Project Files"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "type",
            "type": "string",
            "description": "File type ('FOLDER', 'DOCUMENT', 'IMAGE')",
            "required": true
          },
          {
            "in": "formData",
            "name": "folderId",
            "type": "string",
            "description": "Folder ID of the file"
          },
          {
            "in": "formData",
            "name": "data",
            "type": "file",
            "description": "Content data (required if type is not FOLDER)"
          },
          {
            "in": "formData",
            "name": "name",
            "type": "string",
            "description": "Name of the file (or folder) to create. If omitted the file name will be used. Required if type 'FOLDER'"
          }
        ],
        "responses": {
          "200": {
            "description": "File created successfully",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not allowed to access this project",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Project ID or folder ID were not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "413": {
            "description": "File size exceeds server limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{projectId}/files/deeplink (DRAFT)": {
      "parameters": [
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "description": "ID of the project",
          "type": "string"
        }
      ],
      "get": {
        "description": "Get deeplink to project files. This is a draft and not implemented yet!",
        "tags": [
          "Project Files"
        ],
        "responses": {
          "200": {
            "description": "List returned successfully",
            "schema": {
              "$ref": "#/definitions/Deeplink"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not allowed to access this project",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Project ID was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/files/{fileId}": {
      "parameters": [
        {
          "name": "fileId",
          "in": "path",
          "required": true,
          "description": "The ID of the file.",
          "type": "string"
        }
      ],
      "get": {
        "description": "Get a file/folder",
        "tags": [
          "Project Files"
        ],
        "produces": [
          "application/json",
          "image/json",
          "image/png",
          "application/pdf"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "download",
            "type": "boolean",
            "description": "Whether to download this file. If selected the response will contain the file content instead of its meta data."
          }
        ],
        "responses": {
          "200": {
            "description": "File returned successfully",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not allowed to access the project this file is associated with",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "File ID was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "413": {
            "description": "File size exceeds server limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Update a file/folder",
        "tags": [
          "Project Files"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "folderId",
            "type": "string",
            "description": "The folder ID of the file"
          },
          {
            "in": "formData",
            "name": "data",
            "type": "file",
            "description": "The content data"
          },
          {
            "in": "formData",
            "name": "name",
            "type": "string",
            "description": "The name of the new file (or folder)"
          }
        ],
        "responses": {
          "200": {
            "description": "File updated successfully",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not allowed to access the project this file is associated with",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Project ID or folder ID were not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "413": {
            "description": "File size exceeds server limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{projectId}/members (DRAFT)": {
      "parameters": [
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "description": "The ID of the project.",
          "type": "string"
        }
      ],
      "get": {
        "description": "List all members of a project. This is a draft and not implemented yet!",
        "tags": [
          "Project Members (draft)"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "description": "The number of items to skip."
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "description": "The numbers of items to return (maximum 100)."
          }
        ],
        "responses": {
          "200": {
            "description": "List returned successfully",
            "schema": {
              "$ref": "#/definitions/MembersList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not allowed to access this project ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Project ID was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Add members to a project. This is a draft and not implemented yet!",
        "tags": [
          "Project Members (draft)"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The members to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddMembersList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Members added successfully",
            "schema": {
              "$ref": "#/definitions/MembersList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not allowed to access this project ID or edit members",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Project ID or folder ID were not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "413": {
            "description": "File size exceeds server limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{projectId}/members/{memberId} (DRAFT)": {
      "parameters": [
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "description": "The ID of the project.",
          "type": "string"
        },
        {
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "The ID of the member.",
          "type": "string"
        }
      ],
      "patch": {
        "description": "Edit a member.  This is a draft and not implemented yet!",
        "tags": [
          "Project Members (DRAFT)"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The member details to change",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeMember"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member changed succesfully",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not allowed to access this project ID or edit members",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Project ID or member ID were not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Remove a member from a project -- not yet implemented!",
        "tags": [
          "Project Members (draft)"
        ],
        "responses": {
          "204": {
            "description": "Member removed succesfully"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not allowed to access this project ID or edit members",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Project ID or member ID were not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "description": "Message describing the error",
          "example": "Unable to find project 953c84c6-51ba-4536-b042-85dd20027d0c"
        }
      }
    },
    "Contact": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the contact",
          "example": "Wilhelm Huber"
        },
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Email address of the contact",
          "example": [
            "huber@t-online.de",
            "willy291@gmx.de"
          ],
          "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$"
        },
        "phones": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Phone number of the contact",
          "example": [
            "+49 711 21893732",
            "+49 711 21893733"
          ]
        }
      }
    },
    "CreateProject": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of this project",
          "example": "Wasserrohrbruch"
        },
        "projectType": {
          "type": "string",
          "description": "Project type ('FOLDER' or 'PROJECT')",
          "example": "FOLDER"
        },
        "startDate": {
          "type": "integer",
          "description": "Start timestamp (seconds since UNIX epoch)",
          "example": 1575158400
        },
        "endDate": {
          "type": "integer",
          "description": "End timestamp (seconds since UNIX epoch)",
          "example": 1588291200
        },
        "orderNumber": {
          "type": "string",
          "description": "Order number for this project",
          "example": "92a032as4.853-af62"
        },
        "street": {
          "type": "string",
          "description": "Street and address number of the project location",
          "example": "Bergstraße. 40"
        },
        "zipcode": {
          "type": "string",
          "description": "ZIP code of the project location",
          "example": "12345"
        },
        "city": {
          "type": "string",
          "description": "City of the project location",
          "example": "Amseldorf"
        },
        "country": {
          "type": "string",
          "description": "Country name of the project location",
          "example": "Deutschland"
        },
        "clientName": {
          "type": "string",
          "description": "Name of the client",
          "example": "Karlheinz Maier"
        },
        "clientEmail": {
          "type": "string",
          "description": "E-Mail address of the client",
          "example": "kh-maier@t-online.de"
        },
        "clientPhone": {
          "type": "string",
          "description": "Phone number of the client",
          "example": "+49-170-1611937"
        },
        "billingName": {
          "type": "string",
          "description": "Name of the billing contact",
          "example": "Dietmar Müller"
        },
        "billingStreet": {
          "type": "string",
          "description": "Street and address number of the billing conctact",
          "example": "Birkenallee 16a"
        },
        "billingZipcode": {
          "type": "string",
          "description": "ZIP code of the billing contact",
          "example": "32455"
        },
        "billingCity": {
          "type": "string",
          "description": "City of the billing contact",
          "example": "Krehlingen"
        },
        "billingEmail": {
          "type": "string",
          "description": "E-mail address of the billing contact",
          "example": "d.mueller@mail.org"
        },
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Contact"
          },
          "description": "List of additional contacts"
        },
        "noteContent": {
          "type": "string",
          "description": "User definable note"
        },
        "projects": {
          "type": "array",
          "description": "child project IDs (only applies to type FOLDER)",
          "items": {
            "type": "string"
          }
        },
        "parentProject": {
          "type": "array",
          "description": "parent project ID (only applies to type PROJECT)",
          "items": {
            "type": "string"
          }
        },
        "archived": {
          "type": "boolean",
          "description": "Wether this project should be archived for all non-external members"
        }
      }
    },
    "Project": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique project ID",
          "example": "0000FFB2-9DC1-4A50-A8BB-14C899CC52FC"
        },
        "name": {
          "type": "string",
          "description": "Name of this project",
          "example": "Wasserrohrbruch"
        },
        "projectType": {
          "type": "string",
          "description": "Project type ('FOLDER' or 'PROJECT')",
          "example": "FOLDER"
        },
        "startDate": {
          "type": "integer",
          "description": "Start timestamp (seconds since UNIX epoch)",
          "example": 1575158400
        },
        "endDate": {
          "type": "integer",
          "description": "End timestamp (seconds since UNIX epoch)",
          "example": 1588291200
        },
        "orderNumber": {
          "type": "string",
          "description": "Order number for this project",
          "example": "92a032as4.853-af62"
        },
        "street": {
          "type": "string",
          "description": "Street and address number of the project location",
          "example": "Bergstraße. 40"
        },
        "zipcode": {
          "type": "string",
          "description": "ZIP code of the project location",
          "example": "12345"
        },
        "city": {
          "type": "string",
          "description": "City of the project location",
          "example": "Amseldorf"
        },
        "country": {
          "type": "string",
          "description": "Country name of the project location",
          "example": "Deutschland"
        },
        "clientName": {
          "type": "string",
          "description": "Name of the client",
          "example": "Karlheinz Maier"
        },
        "clientEmail": {
          "type": "string",
          "description": "E-Mail address of the client",
          "example": "kh-maier@t-online.de"
        },
        "clientPhone": {
          "type": "string",
          "description": "Phone number of the client",
          "example": "+49-170-1611937"
        },
        "billingName": {
          "type": "string",
          "description": "Name of the billing contact",
          "example": "Dietmar Müller"
        },
        "billingStreet": {
          "type": "string",
          "description": "Street and address number of the billing conctact",
          "example": "Birkenallee 16a"
        },
        "billingZipcode": {
          "type": "string",
          "description": "ZIP code of the billing contact",
          "example": "32455"
        },
        "billingCity": {
          "type": "string",
          "description": "City of the billing contact",
          "example": "Krehlingen"
        },
        "billingEmail": {
          "type": "string",
          "description": "E-mail address of the billing contact",
          "example": "d.mueller@mail.org"
        },
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Contact"
          },
          "description": "List of additional contacts"
        },
        "noteContent": {
          "type": "string",
          "description": "User definable note"
        },
        "projects": {
          "type": "array",
          "description": "child project IDs (only applies to type FOLDER)",
          "items": {
            "type": "string"
          }
        },
        "parentProject": {
          "type": "array",
          "description": "parent project ID (only applies to type PROJECT)",
          "items": {
            "type": "string"
          }
        },
        "archived": {
          "type": "boolean",
          "description": "Wether this project is archived for all non-external members"
        }
      }
    },
    "ProjectsList": {
      "type": "object",
      "required": [
        "projects"
      ],
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        }
      }
    },
    "Deeplink": {
      "type": "object",
      "required": [
        "webLink",
        "appDeepLink"
      ],
      "properties": {
        "webLink": {
          "type": "string",
          "description": "Link that can be opened in a browser",
          "example": "https://app.mycraftnote.de/#/project?id=0DDAAAA9-2508-4AAF-A576-E91E76EA8CDB"
        },
        "appDeepLink": {
          "type": "string",
          "description": "Link that can be opened in a mobile client",
          "example": "mycrafty://project?id=0DDAAAA9-2508-4AAF-A576-E91E76EA8CDB"
        }
      }
    },
    "File": {
      "type": "object",
      "required": [
        "id",
        "name",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique file ID",
          "example": "00061E3C-9C02-3CE5-EDFD-9186E6F28114"
        },
        "projectId": {
          "type": "string",
          "description": "ID of the project this file is associated with",
          "example": "db5b9a4d-7589-4af4-8c79-a96a3b796dc9"
        },
        "name": {
          "type": "string",
          "description": "User-defined file name",
          "example": "Projektbericht.pdf"
        },
        "folderId": {
          "type": "string",
          "description": "Parent folder ID of this file",
          "example": "00061E3C-9C02-3CE5-EDFD-9186E6F28114"
        },
        "type": {
          "type": "string",
          "description": "File type (FOLDER, DOCUMENT, IMAGE, AUDIO, VIDEO)",
          "example": "DOCUMENT"
        },
        "creationTimestamp": {
          "type": "string",
          "description": "Creation timestamp (seconds since UNIX epoch)",
          "example": 1567685998
        },
        "size": {
          "type": "number",
          "description": "File size in bytes",
          "example": 2450
        }
      }
    },
    "FilesList": {
      "type": "object",
      "required": [
        "files"
      ],
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/File"
          }
        }
      }
    },
    "Member": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique member ID",
          "example": "Ka3gh32ashtQJuuas9"
        },
        "email": {
          "type": "string",
          "description": "E-mail address of the member",
          "example": "cf@gauss.de"
        },
        "name": {
          "type": "string",
          "description": "First name",
          "example": "Carl-Friedrich"
        },
        "lastname": {
          "type": "string",
          "description": "Last name",
          "example": "Gauss"
        },
        "role": {
          "type": "string",
          "description": "Role this member has in the company",
          "example": "OWNER"
        }
      }
    },
    "MembersList": {
      "type": "object",
      "required": [
        "members"
      ],
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Member"
          }
        }
      }
    },
    "AddMember": {
      "type": "object",
      "required": [
        "id",
        "role"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique ID of the member",
          "example": "Ka3gh32ashtQJuuas9"
        },
        "role": {
          "type": "string",
          "description": "Role this member has in a project",
          "example": "OWNER"
        }
      }
    },
    "AddMembersList": {
      "type": "object",
      "required": [
        "members"
      ],
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddMember"
          }
        }
      }
    },
    "ChangeMember": {
      "type": "object",
      "required": [
        "role"
      ],
      "properties": {
        "role": {
          "type": "string",
          "description": "The role this member has in a project",
          "example": "OWNER"
        }
      }
    },
    "Employee": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique employee ID",
          "example": "Ka3gh32ashtQJuuas9"
        },
        "email": {
          "type": "string",
          "description": "E-mail address",
          "example": "cf@gauss.de"
        },
        "name": {
          "type": "string",
          "description": "First name",
          "example": "Carl-Friedrich"
        },
        "lastname": {
          "type": "string",
          "description": "Last name",
          "example": "Gauss"
        },
        "jobTitle": {
          "type": "string",
          "description": "Job title",
          "example": "Mathematician"
        }
      }
    },
    "EmployeesList": {
      "type": "object",
      "required": [
        "members"
      ],
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Employee"
          }
        }
      }
    },
    "InviteEmployee": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique employee ID",
          "example": "Ka3gh32ashtQJuuas9"
        },
        "email": {
          "type": "string",
          "description": "E-mail address",
          "example": "cf@gauss.de"
        },
        "phone": {
          "type": "string",
          "description": "Phone number",
          "example": "+49-171-199132"
        }
      }
    },
    "InviteEmployeesList": {
      "type": "object",
      "required": [
        "members"
      ],
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InviteEmployeesList"
          }
        }
      }
    }
  }
}
